//
//                                                        ▀▀▀▀▀     ▀▀▀▀▀          ▀▀█▀▀
//                                                        ▄▀▀▀▄  ▄  ▄▀▀▀▄  ▄  ▄▀▀▀▄  █  ▄▀▀▀▄
//                                                        █   █  █  █   █  █  █   █  █  █   █
//                                                         ▀▀▀   █   ▀▀▀   █   ▀▀▀   ▀   ▀▀▀
//                                                               █      ▄▄▄█▄▄▄    █   █  
//                                                               ▀      █  █  █     █▄█
//                                                             ▀▀▀▀▀    █  █  █      ▀
//                                                                      ▀  ▀  ▀
//
// ▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄

#include <behaviors/mouse_keys.dtsi>
#include <dt-bindings/zmk/mouse.h>
#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/outputs.h>
#include <dt-bindings/zmk/pointing.h>
#include <dt-bindings/zmk/pointing.h>
#include <dt-bindings/zmk/pointing.h>

#define ZMK_MOUSE_DEFAULT_MOVE_VAL 1200  // 600
#define ZMK_MOUSE_DEFAULT_SCRL_VAL 20    // 10
#define U_MS_U &mmv MOVE_UP
#define U_MS_D &mmv MOVE_DOWN
#define U_MS_L &mmv MOVE_LEFT
#define U_MS_R &mmv MOVE_RIGHT
#define ZMK_MOUSE_DEFAULT_MOVE_VAL 1200  //  600
#define ZMK_MOUSE_DEFAULT_SCRL_VAL 20    // 10

/ {
    combos {
        compatible = "zmk,combos";

        escape {
            bindings = <&kp ESCAPE>;
            key-positions = <21 22>;
            timeout-ms = <180>;
            layers = <0 1 2>;
        };

        tab {
            bindings = <&kp TAB>;
            key-positions = <0 1>;
            timeout-ms = <180>;
            layers = <0 1 2>;
        };

        lock {
            bindings = <&tog 9>;
            key-positions = <20 31>;
            layers = <0 1 5 9>;
        };

        enter {
            bindings = <&kp ENTER>;
            key-positions = <18 19>;
            layers = <0 1>;
        };

        game_six {
            bindings = <&kp NUMBER_6>;
            key-positions = <3 4>;
            layers = <2>;
        };

        shop {
            bindings = <&kp V>;
            key-positions = <25 24>;
            layers = <2>;
        };

        game_enter {
            bindings = <&kp ENTER>;
            key-positions = <20 10>;
            layers = <3>;
        };

        left_del {
            bindings = <&kp DEL>;
            key-positions = <20 10>;
            layers = <0 1>;
        };
    };

    behaviors {
        mmv {
            acceleration-exponent = <1>;      // 1
            time-to-max-speed-ms = <900>;    // 0
            delay-ms = <0>;                   // 0
        };

        msc {
            acceleration-exponent = <1>;      // 0
            time-to-max-speed-ms = <400>;      // 500
            delay-ms = <0>;                   //   10
        };

        left_thumb: left_thumb {
            compatible = "zmk,behavior-tap-dance";
            label = "LEFT_THUMB";
            #binding-cells = <0>;
            bindings = <&mo 5>, <&tog 6>;
        };

        right_thumb: right_thumb {
            compatible = "zmk,behavior-tap-dance";
            label = "RIGHT_THUMB";
            #binding-cells = <0>;
            bindings = <&mo 7>, <&tog 6>;
        };

        win_right_mod: win_right_mod {
            compatible = "zmk,behavior-tap-dance";
            label = "WIN_RIGHT_MOD";
            #binding-cells = <0>;
            bindings = <&kp RCTRL>, <&kp RGUI>;
        };

        os_swap: os_swap {
            compatible = "zmk,behavior-tap-dance";
            label = "OS_SWAP";
            #binding-cells = <0>;
            bindings = <&kp LCTRL>, <&tog 1>;
        };

        media_button: media_button {
            compatible = "zmk,behavior-tap-dance";
            label = "MEDIA_BUTTON";
            #binding-cells = <0>;
            bindings = <&kp C_PLAY_PAUSE>, <&kp C_NEXT>, <&kp C_PREV>;
        };

        mac_left_mod: mac_left_mod {
            compatible = "zmk,behavior-tap-dance";
            label = "MAC_LEFT_MOD";
            #binding-cells = <0>;
            bindings = <&kp LEFT_COMMAND>, <&kp LEFT_ALT>;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        // ▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄

        mac {
            bindings = <
                &kp Q  &kp W  &kp E     &kp R          &kp T          &kp Y         &kp U      &kp I      &kp O    &kp P
                &kp A  &kp S  &kp D     &kp F          &kp G          &kp H         &kp J      &kp K      &kp L    &kp BSPC
&kp LEFT_SHIFT  &kp Z  &kp X  &kp C     &kp V          &kp B          &kp N         &kp M      &kp COMMA  &kp DOT  &kp SLASH  &kp RSHIFT
                              &os_swap  &mac_left_mod  &left_thumb    &right_thumb  &kp SPACE  &kp RALT
            >;
        };

        win {
            bindings = <
        &trans  &trans  &trans  &trans        &trans    &trans  &trans  &trans          &trans  &trans
        &trans  &trans  &trans  &trans        &trans    &trans  &trans  &trans          &trans  &trans
&trans  &trans  &trans  &trans  &trans        &trans    &trans  &trans  &trans          &trans  &trans  &trans
                        &trans  &kp LEFT_ALT  &trans    &trans  &trans  &win_right_mod
            >;
        };

        league {
            bindings = <
       &kp N1  &kp N2  &kp N3    &kp N4     &kp N5       &tog 2  &tog 2  &tog 2         &tog 2  &tog 2
       &kp Q   &kp W   &kp E     &kp R      &kp T        &tog 2  &tog 2  &tog 2         &tog 2  &tog 2
&mo 4  &kp A   &kp S   &kp D     &kp B      &kp G        &tog 2  &tog 2  &tog 2         &tog 2  &tog 2  &tog 2
                       &kp LALT  &kp SPACE  &kp LCTRL    &tog 2  &tog 2  &kp RIGHT_GUI
            >;
        };

        game {
            bindings = <
       &kp TAB     &kp Q  &kp W     &kp E      &kp R        &kp Y   &kp U      &kp I          &kp O    &kp P
       &kp LSHIFT  &kp A  &kp S     &kp D      &kp F        &kp H   &kp J      &kp K          &kp L    &kp BSPC
&mo 4  &kp ESC     &kp Z  &kp X     &kp C      &kp G        &kp N   &kp M      &kp COMMA      &kp DOT  &kp FSLH  &kp RSHFT
                          &kp LALT  &kp SPACE  &kp LCTRL    &tog 3  &kp SPACE  &kp RIGHT_GUI
            >;
        };

        game+ {
            bindings = <
        &kp I  &kp C_VOL_DN  &trans  &kp C_VOL_UP  &media_button    &none  &none  &none  &none  &none
        &kp U  &kp N1        &kp N2  &kp N3        &kp T            &none  &none  &none  &none  &none
&trans  &kp H  &kp N4        &kp N5  &kp N6        &kp M            &none  &none  &none  &none  &none  &none
                             &trans  &trans        &trans           &none  &none  &none
            >;
        };

        left {
            bindings = <
           &kp HOME    &kp PG_UP     &kp PG_DN     &kp END        &kp C_BRIGHTNESS_INC    &kp STAR   &kp N7            &kp N8         &kp N9  &kp FSLH
           &kp LEFT    &kp UP        &kp DOWN      &kp RIGHT      &kp C_BRIGHTNESS_DEC    &kp PLUS   &kp N4            &kp N5         &kp N6  &kp BSPC
&kp LCTRL  &kp C_PREV  &kp C_VOL_UP  &kp C_VOL_DN  &media_button  &kp SPACE               &kp MINUS  &kp N1            &kp N2         &kp N3  &kp DOT   &kp RIGHT_CONTROL
                                     &kp LEFT_ALT  &kp LEFT_GUI   &trans                  &trans     &mt RIGHT_GUI N0  &kp RIGHT_ALT
            >;
        };

        right {
            bindings = <
           &none     &mkp RCLK       &mmv MOVE_UP    &mkp LCLK        &msc SCRL_UP      &kp C_BRI_UP  &kp HOME       &kp PG_DN      &kp PG_UP     &kp END
           &mkp MB4  &mmv MOVE_LEFT  &mmv MOVE_DOWN  &mmv MOVE_RIGHT  &msc SCRL_DOWN    &kp C_BRI_DN  &kp LEFT       &kp DOWN       &kp UP        &kp RIGHT
&kp LCTRL  &none     &msc SCRL_LEFT  &mkp MB3        &msc SCRL_RIGHT  &mkp MB5          &kp SPACE     &media_button  &kp C_VOL_DN   &kp C_VOL_UP  &kp C_PREV  &kp RCTRL
                                     &kp LEFT_ALT    &kp LEFT_GUI     &tog 6            &tog 6        &kp RIGHT_GUI  &kp RIGHT_ALT
            >;
        };

        symbols {
            bindings = <
            &none            &kp RIGHT_BRACKET  &kp RIGHT_PARENTHESIS  &kp RIGHT_BRACE  &kp GRAVE      &kp BSLH   &kp LEFT_BRACE  &kp LEFT_PARENTHESIS  &kp LEFT_BRACKET  &kp EQUAL
            &kp EXCLAMATION  &kp AT             &kp POUND              &kp DOLLAR       &kp PERCENT    &kp CARET  &kp AMPERSAND   &kp ASTERISK          &kp SQT           &kp SEMICOLON
&kp LSHIFT  &none            &none              &none                  &none            &none          &kp MINUS  &none           &kp LESS_THAN         &kp GREATER_THAN  &kp QUESTION   &kp RSHIFT
                                                &trans                 &trans           &trans         &trans     &trans          &trans
            >;
        };

        admin {
            bindings = <
            &bt BT_SEL 0  &bt BT_SEL 1  &bt BT_SEL 2  &bt BT_SEL 3  &bt BT_SEL 4    &kp F9  &kp F10  &kp F11  &kp F12  &none
            &tog 2        &none         &tog 3        &none         &out OUT_TOG    &kp F5  &kp F6   &kp F7   &kp F8   &kp LA(F4)
&bt BT_CLR  &none         &none         &none         &none         &none           &kp F1  &kp F2   &kp F3   &kp F4   &none       &bt BT_CLR_ALL
                                        &trans        &trans        &trans          &trans  &trans   &trans
            >;
        };

        lock {
            bindings = <
        &none  &none  &none  &none  &none    &none  &none  &none  &none  &none
        &none  &none  &none  &none  &none    &none  &none  &none  &none  &none
&trans  &none  &none  &none  &none  &none    &none  &none  &none  &none  &none  &trans
                      &none  &none  &none    &none  &none  &none
            >;
        };
    };

    conditional_layers {
        compatible = "zmk,conditional-layers";

        admin {
            if-layers = <5 7>;
            then-layer = <8>;
        };
    };
};

// ┏━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┓
// ┗━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┛
//             ┏━━━━━━━━━━━┳━━━━━━━━━━━┳━━━━━━━━━━━┳━━━━━━━━━━━┳━━━━━━━━━━━┓   ┏━━━━━━━━━━━┳━━━━━━━━━━━┳━━━━━━━━━━━┳━━━━━━━━━━━┳━━━━━━━━━━━┓
//             ┃     Q     ┃     W     ┃     E     ┃     R     ┃     T     ┃   ┃     Y     ┃     U     ┃     I     ┃     O     ┃     P     ┃
//             ┣━━━━━━━━━━━╋━━━━━━━━━━━╋━━━━━━━━━━━╋━━━━━━━━━━━╋━━━━━━━━━━━┫   ┣━━━━━━━━━━━╋━━━━━━━━━━━╋━━━━━━━━━━━╋━━━━━━━━━━━╋━━━━━━━━━━━┫
//             ┃     A     ┃     R     ┃     S     ┃     T     ┃     D     ┃   ┃     H     ┃     N     ┃     E     ┃     I     ┃     O     ┃
// ┏━━━━━━━━━━━╋━━━━━━━━━━━╋━━━━━━━━━━━╋━━━━━━━━━━━╋━━━━━━━━━━━╋━━━━━━━━━━━┫   ┣━━━━━━━━━━━╋━━━━━━━━━━━╋━━━━━━━━━━━╋━━━━━━━━━━━╋━━━━━━━━━━━╋━━━━━━━━━━━┓
// ┃     Q     ┃     Z     ┃     X     ┃     C     ┃     V     ┃     B     ┃   ┃     K     ┃     M     ┃     ,     ┃     .     ┃     /     ┃     \     ┃
// ┗━━━━━━━━━━━┻━━━━━━━━━━━┻━━━━━━━━━━━╋━━━━━━━━━━━╋━━━━━━━━━━━╋━━━━━━━━━━━┫   ┣━━━━━━━━━━━╋━━━━━━━━━━━╋━━━━━━━━━━━╋━━━━━━━━━━━┻━━━━━━━━━━━┻━━━━━━━━━━━┛
//                                     ┃    DEL    ┃    TAB    ┃    SPC    ┃   ┃   ENTER   ┃           ┃   BSPC    ┃
//                                     ┗━━━━━━━━━━━┻━━━━━━━━━━━┻━━━━━━━━━━━┛   ┗━━━━━━━━━━━┻━━━━━━━━━━━┻━━━━━━━━━━━┛
